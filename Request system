‎'use client'
‎import { useState } from 'react'
‎
‎export default function RequestSystem({ requests, setRequests, isAdmin, shop }) {
‎  const [newRequest, setNewRequest] = useState({
‎    type: 'item-request',
‎    itemName: '',
‎    customerName: '',
‎    customerPhone: '',
‎    notes: '',
‎    file: null
‎  })
‎  const [error, setError] = useState('')
‎  const [success, setSuccess] = useState('')
‎
‎  const handleInputChange = (e) => {
‎    const { name, value } = e.target
‎    setNewRequest(prev => ({ ...prev, [name]: value }))
‎  }
‎
‎  const handleFileChange = (e) => {
‎    setNewRequest(prev => ({ ...prev, file: e.target.files[0] }))
‎  }
‎
‎  const handleSubmit = () => {
‎    setError('')
‎    setSuccess('')
‎    
‎    if (!newRequest.customerName) {
‎      setError('Customer name is required')
‎      return
‎    }
‎
‎    if (newRequest.type === 'item-request' && !newRequest.itemName) {
‎      setError('Item name is required for item requests')
‎      return
‎    }
‎
‎    const currentUser = JSON.parse(localStorage.getItem('currentUser'))
‎    const request = {
‎      id: Date.now(),
‎      type: newRequest.type,
‎      itemName: newRequest.itemName,
‎      customerName: newRequest.customerName,
‎      customerPhone: newRequest.customerPhone,
‎      notes: newRequest.notes,
‎      resolved: false,
‎      resolvedBy: null,
‎      resolvedAt: null,
‎      createdAt: new Date().toISOString(),
‎      submittedBy: currentUser.name,
‎      shop: isAdmin ? null : shop
‎    }
‎
‎    const updatedRequests = [...requests, request]
‎    setRequests(updatedRequests)
‎    localStorage.setItem('requests', JSON.stringify(updatedRequests))
‎    
‎    setSuccess('Request submitted successfully!')
‎    setNewRequest({
‎      type: 'item-request',
‎      itemName: '',
‎      customerName: '',
‎      customerPhone: '',
‎      notes: '',
‎      file: null
‎    })
‎  }
‎
‎  const handleResolve = (requestId) => {
‎    const currentUser = JSON.parse(localStorage.getItem('currentUser'))
‎    const updatedRequests = requests.map(req => 
‎      req.id === requestId 
‎        ? { 
‎            ...req, 
‎            resolved: true,
‎            resolvedBy: currentUser.name,
‎            resolvedAt: new Date().toISOString()
‎          } 
‎        : req
‎    )
‎    setRequests(updatedRequests)
‎    localStorage.setItem('requests', JSON.stringify(updatedRequests))
‎  }
‎
‎  const filteredRequests = isAdmin 
‎    ? requests 
‎    : requests.filter(req => req.shop === shop)
‎
‎  return (
‎    <div className="bg-white p-4 rounded-lg shadow">
‎      <h2 className="text-xl font-semibold mb-4">
‎        {isAdmin ? 'Customer Requests' : 'Submit Customer Request'}
‎      </h2>
‎      
‎      {!isAdmin && (
‎        <div className="mb-6 p-4 border rounded">
‎          <h3 className="font-medium mb-3">New Request</h3>
‎          {error && <p className="text-red-500 mb-2">{error}</p>}
‎          {success && <p className="text-green-500 mb-2">{success}</p>}
‎          
‎          <div className="space-y-3">
‎            <div>
‎              <label className="block text-sm font-medium mb-1">Request Type</label>
‎              <select
‎                name="type"
‎                value={newRequest.type}
‎                onChange={handleInputChange}
‎                className="w-full px-3 py-2 border rounded"
‎              >
‎                <option value="item-request">Item Request</option>
‎                <option value="special-order">Special Order</option>
‎                <option value="complaint">Complaint</option>
‎                <option value="other">Other</option>
‎              </select>
‎            </div>
‎            
‎            {newRequest.type === 'item-request' && (
‎              <div>
‎                <label className="block text-sm font-medium mb-1">Item Name</label>
‎                <input
‎                  type="text"
‎                  name="itemName"
‎                  value={newRequest.itemName}
‎                  onChange={handleInputChange}
‎                  className="w-full px-3 py-2 border rounded"
‎                  required
‎                />
‎              </div>
‎            )}
‎            
‎            <div>
‎              <label className="block text-sm font-medium mb-1">Customer Name</label>
‎              <input
‎                type="text"
‎                name="customerName"
‎                value={newRequest.customerName}
‎                onChange={handleInputChange}
‎                className="w-full px-3 py-2 border rounded"
‎                required
‎              />
‎            </div>
‎            
‎            <div>
‎              <label className="block text-sm font-medium mb-1">Customer Phone</label>
‎              <input
‎                type="text"
‎                name="customerPhone"
‎                value={newRequest.customerPhone}
‎                onChange={handleInputChange}
‎                className="w-full px-3 py-2 border rounded"
‎              />
‎            </div>
‎            
‎            <div>
‎              <label className="block text-sm font-medium mb-1">Notes</label>
‎              <textarea
‎                name="notes"
‎                value={newRequest.notes}
‎                onChange={handleInputChange}
‎                className="w-full px-3 py-2 border rounded"
‎                rows="3"
‎              />
‎            </div>
‎            
‎            <div>
‎              <label className="block text-sm font-medium mb-1">Attachment (Optional)</label>
‎              <input
‎                type="file"
‎                onChange={handleFileChange}
‎                className="w-full px-3 py-2 border rounded"
‎              />
‎            </div>
‎            
‎            <button
‎              onClick={handleSubmit}
‎              className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700"
‎            >
‎              Submit Request
‎            </button>
‎          </div>
‎        </div>
‎      )}
‎      
‎      <div>
‎        <h3 className="font-medium mb-2">
‎          {isAdmin ? 'All Requests' : 'Your Recent Requests'}
‎        </h3>
‎        
‎        {filteredRequests.length === 0 ? (
‎          <p className="text-gray-500">No requests found</p>
‎        ) : (
‎          <div className="overflow-x-auto">
‎            <table className="min-w-full divide-y divide-gray-200">
‎              <thead className="bg-gray-50">
‎                <tr>
‎                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Type</th>
‎                  {isAdmin && <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Shop</th>}
‎                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Customer</th>
‎                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Details</th>
‎                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
‎                  {isAdmin && <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>}
‎                </tr>
‎              </thead>
‎              <tbody className="bg-white divide-y divide-gray-200">
‎                {filteredRequests.map(request => (
‎                  <tr key={request.id}>
‎                    <td className="px-6 py-4 whitespace-nowrap capitalize">{request.type.replace('-', ' ')}</td>
‎                    {isAdmin && (
‎                      <td className="px-6 py-4 whitespace-nowrap">
‎                        {request.shop === 'boutique' ? 'Boutique' : 
‎                         request.shop === 'decoration' ? 'Decoration' : 'N/A'}
‎                      </td>
‎                    )}
‎                    <td className="px-6 py-4 whitespace-nowrap">
‎                      <div className="font-medium">{request.customerName}</div>
‎                      <div className="text-sm text-gray-500">{request.customerPhone || 'No phone'}</div>
‎                    </td>
‎                    <td className="px-6 py-4">
‎                      <div className="font-medium">{request.itemName || 'N/A'}</div>
‎                      <div className="text-sm text-gray-500">{request.notes || 'No notes'}</div>
‎                    </td>
‎                    <td className="px-6 py-4 whitespace-nowrap">
‎                      <span className={`px-2 py-1 rounded-full text-xs ${
‎                        request.resolved ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
‎                      }`}>
‎                        {request.resolved ? 'Resolved' : 'Pending'}
‎                      </span>
‎                      {request.resolved && (
‎                        <div className="text-xs text-gray-500 mt-1">
‎                          by {request.resolvedBy}
‎                        </div>
‎                      )}
‎                    </td>
‎                    {isAdmin && !request.resolved && (
‎                      <td className="px-6 py-4 whitespace-nowrap">
‎                        <button
‎                          onClick={() => handleResolve(request.id)}
‎                          className="px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700"
‎                        >
‎                          Mark Resolved
‎                        </button>
‎                      </td>
‎                    )}
‎                  </tr>
‎                ))}
‎              </tbody>
‎            </table>
‎          </div>
‎        )}
‎      </div>
‎    </div>
‎  )
‎}
‎
