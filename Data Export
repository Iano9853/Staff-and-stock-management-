‎'use client'
‎import { useState } from 'react'
‎
‎export default function DataExport({ users, stock, requests, recommendations }) {
‎  const [exportType, setExportType] = useState('all')
‎  const [isExporting, setIsExporting] = useState(false)
‎
‎  const exportToCSV = () => {
‎    setIsExporting(true)
‎    
‎    let data = []
‎    let headers = []
‎    let filename = ''
‎
‎    switch (exportType) {
‎      case 'users':
‎        data = users.map(user => ({
‎          ID: user.id,
‎          Name: user.name,
‎          Email: user.email,
‎          Role: user.role,
‎          Shop: user.shop || 'N/A',
‎          Status: user.verified ? 'Verified' : 'Pending',
‎          'Created At': new Date(user.createdAt).toLocaleString(),
‎          'Last Login': user.lastLogin ? new Date(user.lastLogin).toLocaleString() : 'Never'
‎        }))
‎        headers = ['ID', 'Name', 'Email', 'Role', 'Shop', 'Status', 'Created At', 'Last Login']
‎        filename = 'users_export.csv'
‎        break
‎        
‎      case 'stock':
‎        data = [
‎          ...stock.boutique.map(item => ({
‎            Shop: 'Boutique',
‎            ID: item.id,
‎            Item: item.name,
‎            Brand: item.brand,
‎            Gender: item.gender,
‎            Quantity: item.quantity,
‎            Price: item.price
‎          })),
‎          ...stock.decoration.map(item => ({
‎            Shop: 'House Decoration',
‎            ID: item.id,
‎            Item: item.name,
‎            Brand: item.brand,
‎            Gender: 'N/A',
‎            Quantity: item.quantity,
‎            Price: item.price
‎          }))
‎        ]
‎        headers = ['Shop', 'ID', 'Item', 'Brand', 'Gender', 'Quantity', 'Price']
‎        filename = 'stock_export.csv'
‎        break
‎        
‎      case 'requests':
‎        data = requests.map(req => ({
‎          ID: req.id,
‎          Shop: req.shop === 'boutique' ? 'Boutique' : 'House Decoration',
‎          'Request Type': req.type,
‎          'Item Name': req.itemName || 'N/A',
‎          'Customer Name': req.customerName,
‎          'Customer Phone': req.customerPhone,
‎          'Submitted By': req.submittedBy,
‎          Status: req.resolved ? 'Resolved' : 'Pending',
‎          'Submitted At': new Date(req.createdAt).toLocaleString(),
‎          Notes: req.notes || 'N/A'
‎        }))
‎        headers = ['ID', 'Shop', 'Request Type', 'Item Name', 'Customer Name', 'Customer Phone', 
‎                  'Submitted By', 'Status', 'Submitted At', 'Notes']
‎        filename = 'requests_export.csv'
‎        break
‎        
‎      case 'recommendations':
‎        data = recommendations.map(rec => ({
‎          ID: rec.id,
‎          Shop: rec.shop === 'boutique' ? 'Boutique' : 'House Decoration',
‎          'Submitted By': rec.submittedBy,
‎          Recommendation: rec.recommendation,
‎          Status: rec.status || 'Pending',
‎          'Submitted At': new Date(rec.createdAt).toLocaleString(),
‎          'Admin Notes': rec.adminNotes || 'N/A'
‎        }))
‎        headers = ['ID', 'Shop', 'Submitted By', 'Recommendation', 'Status', 'Submitted At', 'Admin Notes']
‎        filename = 'recommendations_export.csv'
‎        break
‎        
‎      default: // 'all'
‎        // Export all data in separate sheets (not possible in CSV, so we'll zip them)
‎        // For simplicity, we'll combine them with headers
‎        const allData = [
‎          { sheet: 'Users', data: users },
‎          { sheet: 'Boutique Stock', data: stock.boutique },
‎          { sheet: 'Decoration Stock', data: stock.decoration },
‎          { sheet: 'Requests', data: requests },
‎          { sheet: 'Recommendations', data: recommendations }
‎        ]
‎        exportMultipleSheets(allData)
‎        return
‎    }
‎
‎    // Convert to CSV
‎    const csvContent = [
‎      headers.join(','),
‎      ...data.map(row => 
‎        headers.map(field => 
‎          `"${String(row[field] || '').replace(/"/g, '""')}"`
‎        ).join(',')
‎      )
‎    ].join('\n')
‎
‎    // Download
‎    downloadCSV(csvContent, filename)
‎    setIsExporting(false)
‎  }
‎
‎  const exportMultipleSheets = (sheets) => {
‎    // For a real implementation, you would use a library like JSZip
‎    // Here we'll just export the first sheet for simplicity
‎    const firstSheet = sheets[0]
‎    let csvContent = ''
‎    
‎    if (firstSheet.sheet === 'Users') {
‎      csvContent = [
‎        ['ID', 'Name', 'Email', 'Role', 'Shop', 'Status'].join(','),
‎        ...firstSheet.data.map(user => 
‎          [user.id, user.name, user.email, user.role, user.shop || '', user.verified ? 'Verified' : 'Pending'].join(',')
‎        )
‎      ].join('\n')
‎    }
‎    
‎    downloadCSV(csvContent, 'all_data_export.csv')
‎    setIsExporting(false)
‎    alert('Full export would generate multiple files in a real implementation')
‎  }
‎
‎  const downloadCSV = (content, filename) => {
‎    const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' })
‎    const link = document.createElement('a')
‎    const url = URL.createObjectURL(blob)
‎    
‎    link.setAttribute('href', url)
‎    link.setAttribute('download', filename)
‎    link.style.visibility = 'hidden'
‎    
‎    document.body.appendChild(link)
‎    link.click()
‎    document.body.removeChild(link)
‎  }
‎
‎  return (
‎    <div className="bg-white p-4 rounded-lg shadow">
‎      <h2 className="text-xl font-semibold mb-4">Data Export</h2>
‎      
‎      <div className="mb-4">
‎        <label className="block text-sm font-medium mb-2">Export Type</label>
‎        <select
‎          value={exportType}
‎          onChange={(e) => setExportType(e.target.value)}
‎          className="w-full px-3 py-2 border rounded"
‎        >
‎          <option value="all">All Data</option>
‎          <option value="users">Users</option>
‎          <option value="stock">Stock</option>
‎          <option value="requests">Customer Requests</option>
‎          <option value="recommendations">Recommendations</option>
‎        </select>
‎      </div>
‎      
‎      <button
‎        onClick={exportToCSV}
‎        disabled={isExporting}
‎        className={`px-4 py-2 rounded text-white ${
‎          isExporting ? 'bg-blue-400' : 'bg-blue-600 hover:bg-blue-700'
‎        }`}
‎      >
‎        {isExporting ? 'Exporting...' : 'Export to CSV'}
‎      </button>
‎      
‎      <p className="mt-3 text-sm text-gray-600">
‎        Note: Large exports may take a few moments to process.
‎      </p>
‎    </div>
‎  )
‎}
‎
